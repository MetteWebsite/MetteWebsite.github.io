{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\n\nvar SourceMapGenerator = require(\"source-map\").SourceMapGenerator;\n\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\n\nvar fromStringWithSourceMap = require(\"source-list-map\").fromStringWithSourceMap;\n\nvar Source = require(\"./Source\");\n\nvar applySourceMap = require(\"./applySourceMap\");\n\nclass SourceMapSource extends Source {\n  constructor(value, name, sourceMap, originalSource, innerSourceMap, removeOriginalSource) {\n    super();\n    this._value = value;\n    this._name = name;\n    this._sourceMap = sourceMap;\n    this._originalSource = originalSource;\n    this._innerSourceMap = innerSourceMap;\n    this._removeOriginalSource = removeOriginalSource;\n  }\n\n  source() {\n    return this._value;\n  }\n\n  node(options) {\n    var sourceMap = this._sourceMap;\n    var node = SourceNode.fromStringWithSourceMap(this._value, new SourceMapConsumer(sourceMap));\n    node.setSourceContent(this._name, this._originalSource);\n    var innerSourceMap = this._innerSourceMap;\n\n    if (innerSourceMap) {\n      node = applySourceMap(node, new SourceMapConsumer(innerSourceMap), this._name, this._removeOriginalSource);\n    }\n\n    return node;\n  }\n\n  listMap(options) {\n    options = options || {};\n    if (options.module === false) return new SourceListMap(this._value, this._name, this._value);\n    return fromStringWithSourceMap(this._value, typeof this._sourceMap === \"string\" ? JSON.parse(this._sourceMap) : this._sourceMap);\n  }\n\n  updateHash(hash) {\n    hash.update(this._value);\n    if (this._originalSource) hash.update(this._originalSource);\n  }\n\n}\n\nrequire(\"./SourceAndMapMixin\")(SourceMapSource.prototype);\n\nmodule.exports = SourceMapSource;","map":{"version":3,"sources":["C:/Users/emmab/Documents/GitHub/MetteWebsite.github.io/node_modules/webpack-sources/lib/SourceMapSource.js"],"names":["SourceNode","require","SourceMapConsumer","SourceMapGenerator","SourceListMap","fromStringWithSourceMap","Source","applySourceMap","SourceMapSource","constructor","value","name","sourceMap","originalSource","innerSourceMap","removeOriginalSource","_value","_name","_sourceMap","_originalSource","_innerSourceMap","_removeOriginalSource","source","node","options","setSourceContent","listMap","module","JSON","parse","updateHash","hash","update","prototype","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,UAAvC;;AACA,IAAIE,iBAAiB,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,iBAA9C;;AACA,IAAIC,kBAAkB,GAAGF,OAAO,CAAC,YAAD,CAAP,CAAsBE,kBAA/C;;AACA,IAAIC,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAAP,CAA2BG,aAA/C;;AACA,IAAIC,uBAAuB,GAAGJ,OAAO,CAAC,iBAAD,CAAP,CAA2BI,uBAAzD;;AACA,IAAIC,MAAM,GAAGL,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIM,cAAc,GAAGN,OAAO,CAAC,kBAAD,CAA5B;;AAEA,MAAMO,eAAN,SAA8BF,MAA9B,CAAqC;AACpCG,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAcC,SAAd,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,oBAAzD,EAA+E;AACzF;AACA,SAAKC,MAAL,GAAcN,KAAd;AACA,SAAKO,KAAL,GAAaN,IAAb;AACA,SAAKO,UAAL,GAAkBN,SAAlB;AACA,SAAKO,eAAL,GAAuBN,cAAvB;AACA,SAAKO,eAAL,GAAuBN,cAAvB;AACA,SAAKO,qBAAL,GAA6BN,oBAA7B;AACA;;AAEDO,EAAAA,MAAM,GAAG;AACR,WAAO,KAAKN,MAAZ;AACA;;AAEDO,EAAAA,IAAI,CAACC,OAAD,EAAU;AACb,QAAIZ,SAAS,GAAG,KAAKM,UAArB;AACA,QAAIK,IAAI,GAAGvB,UAAU,CAACK,uBAAX,CAAmC,KAAKW,MAAxC,EAAgD,IAAId,iBAAJ,CAAsBU,SAAtB,CAAhD,CAAX;AACAW,IAAAA,IAAI,CAACE,gBAAL,CAAsB,KAAKR,KAA3B,EAAkC,KAAKE,eAAvC;AACA,QAAIL,cAAc,GAAG,KAAKM,eAA1B;;AACA,QAAGN,cAAH,EAAmB;AAClBS,MAAAA,IAAI,GAAGhB,cAAc,CAACgB,IAAD,EAAO,IAAIrB,iBAAJ,CAAsBY,cAAtB,CAAP,EAA8C,KAAKG,KAAnD,EAA0D,KAAKI,qBAA/D,CAArB;AACA;;AACD,WAAOE,IAAP;AACA;;AAEDG,EAAAA,OAAO,CAACF,OAAD,EAAU;AAChBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAGA,OAAO,CAACG,MAAR,KAAmB,KAAtB,EACC,OAAO,IAAIvB,aAAJ,CAAkB,KAAKY,MAAvB,EAA+B,KAAKC,KAApC,EAA2C,KAAKD,MAAhD,CAAP;AACD,WAAOX,uBAAuB,CAAC,KAAKW,MAAN,EAAc,OAAO,KAAKE,UAAZ,KAA2B,QAA3B,GAAsCU,IAAI,CAACC,KAAL,CAAW,KAAKX,UAAhB,CAAtC,GAAoE,KAAKA,UAAvF,CAA9B;AACA;;AAEDY,EAAAA,UAAU,CAACC,IAAD,EAAO;AAChBA,IAAAA,IAAI,CAACC,MAAL,CAAY,KAAKhB,MAAjB;AACA,QAAG,KAAKG,eAAR,EACCY,IAAI,CAACC,MAAL,CAAY,KAAKb,eAAjB;AACD;;AArCmC;;AAwCrClB,OAAO,CAAC,qBAAD,CAAP,CAA+BO,eAAe,CAACyB,SAA/C;;AAEAN,MAAM,CAACO,OAAP,GAAiB1B,eAAjB","sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\"use strict\";\r\n\r\nvar SourceNode = require(\"source-map\").SourceNode;\r\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\r\nvar SourceMapGenerator = require(\"source-map\").SourceMapGenerator;\r\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\r\nvar fromStringWithSourceMap = require(\"source-list-map\").fromStringWithSourceMap;\r\nvar Source = require(\"./Source\");\r\nvar applySourceMap = require(\"./applySourceMap\");\r\n\r\nclass SourceMapSource extends Source {\r\n\tconstructor(value, name, sourceMap, originalSource, innerSourceMap, removeOriginalSource) {\r\n\t\tsuper();\r\n\t\tthis._value = value;\r\n\t\tthis._name = name;\r\n\t\tthis._sourceMap = sourceMap;\r\n\t\tthis._originalSource = originalSource;\r\n\t\tthis._innerSourceMap = innerSourceMap;\r\n\t\tthis._removeOriginalSource = removeOriginalSource;\r\n\t}\r\n\r\n\tsource() {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\tnode(options) {\r\n\t\tvar sourceMap = this._sourceMap;\r\n\t\tvar node = SourceNode.fromStringWithSourceMap(this._value, new SourceMapConsumer(sourceMap));\r\n\t\tnode.setSourceContent(this._name, this._originalSource);\r\n\t\tvar innerSourceMap = this._innerSourceMap;\r\n\t\tif(innerSourceMap) {\r\n\t\t\tnode = applySourceMap(node, new SourceMapConsumer(innerSourceMap), this._name, this._removeOriginalSource);\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\r\n\tlistMap(options) {\r\n\t\toptions = options || {};\r\n\t\tif(options.module === false)\r\n\t\t\treturn new SourceListMap(this._value, this._name, this._value);\r\n\t\treturn fromStringWithSourceMap(this._value, typeof this._sourceMap === \"string\" ? JSON.parse(this._sourceMap) : this._sourceMap);\r\n\t}\r\n\r\n\tupdateHash(hash) {\r\n\t\thash.update(this._value);\r\n\t\tif(this._originalSource)\r\n\t\t\thash.update(this._originalSource);\r\n\t}\r\n}\r\n\r\nrequire(\"./SourceAndMapMixin\")(SourceMapSource.prototype);\r\n\r\nmodule.exports = SourceMapSource;\r\n"]},"metadata":{},"sourceType":"script"}